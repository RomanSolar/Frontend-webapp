{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMA+DeA,MA5Df,WAEE,IAAMC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAC1B,EAAkCE,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KA8CA,OA5CAC,qBAAW,WAET,IAAMC,EAASP,EAAUQ,QAGzBD,EAAOE,MAA4B,EAApBC,OAAOC,WACtBJ,EAAOK,OAA8B,EAArBF,OAAOG,YACvBN,EAAOO,MAAML,MAAb,UAAwBC,OAAOC,WAA/B,MACAJ,EAAOO,MAAMF,OAAb,UAAyBF,OAAOG,YAAhC,MAGA,IAAME,EAAUR,EAAOS,WAAW,MAClCD,EAAQE,MAAM,EAAE,GAChBF,EAAQG,QAAU,QAClBH,EAAQI,YAAc,QACtBJ,EAAQK,UAAY,EACpBlB,EAAWM,QAAUO,IACpB,IA4BD,wBACEM,YA1BiB,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,YACdC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QAChBtB,EAAWM,QAAQiB,YACnBvB,EAAWM,QAAQkB,OAAOH,EAASC,GACnCnB,GAAa,IAuBXsB,UApBkB,WAGpBzB,EAAWM,QAAQoB,YACnBvB,GAAa,IAiBXwB,YAdS,SAAC,GAAmB,IAAlBP,EAAiB,EAAjBA,YAEb,GAAIlB,EAAJ,CAGA,IAAOmB,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QAChBtB,EAAWM,QAAQsB,OAAOP,EAASC,GACnCtB,EAAWM,QAAQuB,WAQjBC,IAAOhC,KC9CEiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.01fe03b6.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\n//import './App.css';\n\nfunction App() {\n\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const [isDrawing, setIsDrawing] = useState(false)\n\n  useEffect( () => {\n\n    const canvas = canvasRef.current\n\n    //To support computers with higher screen density (such as mac with retina) we'll double the pixel density::\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n\n    //Define 2d context\n    const context = canvas.getContext('2d')\n    context.scale(2,2)\n    context.lineCap = 'round'\n    context.strokeStyle = 'black'\n    context.lineWidth = 5\n    contextRef.current = context;\n  }, []  )\n\n  //HANDLERS:\n  const startDrawing = ({nativeEvent}) =>  {\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n\n  const finishDrawing = () => {\n    //asign in to mouseUp\n\n    contextRef.current.closePath()\n    setIsDrawing(false)\n  }\n\n  const draw = ({nativeEvent}) => {\n    //if we're no drawing - don't draw the line\n    if(!isDrawing){\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n\n  return (\n    <canvas\n      onMouseDown = {startDrawing}\n      onMouseUp = {finishDrawing}\n      onMouseMove = {draw}\n      ref = {canvasRef}\n    />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}