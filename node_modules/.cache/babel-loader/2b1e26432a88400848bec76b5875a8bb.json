{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/work3/Frontend-webapp/drawing-react-canvas/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react'; //import './App.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current; //To support computers with higher screen density (such as mac with retina) we'll double the pixel density::\n\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`; //Define 2d context\n\n    const context = canvas.getContext('2d');\n    context.scale(2, 2);\n    context.lineCap = 'round';\n    context.strokeStyle = 'black';\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []); //HANDLERS:\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    //asign in to mouseUp\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n\n    //if we're no drawing - don't draw the line\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    onMouseDown: startDrawing,\n    onMouseUp: finishDrawing,\n    onMouseMove: draw,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gX+PwV6uGFVV0Nk+m7BEZwABNTU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbook/work3/Frontend-webapp/drawing-react-canvas/src/App.js"],"names":["React","useRef","useEffect","useState","App","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","lineTo","stroke"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD,C,CACA;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMK,UAAU,GAAGL,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAE,MAAM;AAEf,UAAMO,MAAM,GAAGJ,SAAS,CAACK,OAAzB,CAFe,CAIf;;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAeC,MAAM,CAACC,UAAP,GAAoB,CAAnC;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAgBF,MAAM,CAACG,WAAP,GAAqB,CAArC;AACAN,IAAAA,MAAM,CAACO,KAAP,CAAaL,KAAb,GAAsB,GAAEC,MAAM,CAACC,UAAW,IAA1C;AACAJ,IAAAA,MAAM,CAACO,KAAP,CAAaF,MAAb,GAAuB,GAAEF,MAAM,CAACG,WAAY,IAA5C,CARe,CAUf;;AACA,UAAME,OAAO,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAgB,CAAhB;AACAF,IAAAA,OAAO,CAACG,OAAR,GAAkB,OAAlB;AACAH,IAAAA,OAAO,CAACI,WAAR,GAAsB,OAAtB;AACAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB;AACAhB,IAAAA,UAAU,CAACI,OAAX,GAAqBO,OAArB;AACD,GAjBQ,EAiBN,EAjBM,CAAT,CANa,CAyBb;;AACA,QAAMM,YAAY,GAAG,QAAoB;AAAA,QAAnB;AAACC,MAAAA;AAAD,KAAmB;AACvC,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAqBF,WAA3B;AACAlB,IAAAA,UAAU,CAACI,OAAX,CAAmBiB,SAAnB;AACArB,IAAAA,UAAU,CAACI,OAAX,CAAmBkB,MAAnB,CAA0BH,OAA1B,EAAmCC,OAAnC;AACAlB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GALD;;AAOA,QAAMqB,aAAa,GAAG,MAAM;AAC1B;AAEAvB,IAAAA,UAAU,CAACI,OAAX,CAAmBoB,SAAnB;AACAtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GALD;;AAOA,QAAMuB,IAAI,GAAG,SAAmB;AAAA,QAAlB;AAACP,MAAAA;AAAD,KAAkB;;AAC9B;AACA,QAAG,CAACjB,SAAJ,EAAc;AACZ;AACD;;AACD,UAAM;AAACkB,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAqBF,WAA3B;AACAlB,IAAAA,UAAU,CAACI,OAAX,CAAmBsB,MAAnB,CAA0BP,OAA1B,EAAmCC,OAAnC;AACApB,IAAAA,UAAU,CAACI,OAAX,CAAmBuB,MAAnB;AACD,GARD;;AAUA,sBACE;AACE,IAAA,WAAW,EAAIV,YADjB;AAEE,IAAA,SAAS,EAAIM,aAFf;AAGE,IAAA,WAAW,EAAIE,IAHjB;AAIE,IAAA,GAAG,EAAI1B;AAJT;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA1DQD,G;;KAAAA,G;AA4DT,eAAeA,GAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\n//import './App.css';\n\nfunction App() {\n\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const [isDrawing, setIsDrawing] = useState(false)\n\n  useEffect( () => {\n\n    const canvas = canvasRef.current\n\n    //To support computers with higher screen density (such as mac with retina) we'll double the pixel density::\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n\n    //Define 2d context\n    const context = canvas.getContext('2d')\n    context.scale(2,2)\n    context.lineCap = 'round'\n    context.strokeStyle = 'black'\n    context.lineWidth = 5\n    contextRef.current = context;\n  }, []  )\n\n  //HANDLERS:\n  const startDrawing = ({nativeEvent}) =>  {\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n\n  const finishDrawing = () => {\n    //asign in to mouseUp\n\n    contextRef.current.closePath()\n    setIsDrawing(false)\n  }\n\n  const draw = ({nativeEvent}) => {\n    //if we're no drawing - don't draw the line\n    if(!isDrawing){\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n\n  return (\n    <canvas\n      onMouseDown = {startDrawing}\n      onMouseUp = {finishDrawing}\n      onMouseMove = {draw}\n      ref = {canvasRef}\n    />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}