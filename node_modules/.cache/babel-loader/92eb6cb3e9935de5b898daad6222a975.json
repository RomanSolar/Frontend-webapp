{"ast":null,"code":"import _slicedToArray from\"/Users/macbook/work3/Frontend-webapp/drawing-react-canvas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useEffect,useState}from'react';//import './App.css';\nimport{jsx as _jsx}from\"react/jsx-runtime\";function App(){var canvasRef=useRef(null);var contextRef=useRef(null);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isDrawing=_useState2[0],setIsDrawing=_useState2[1];useEffect(function(){var canvas=canvasRef.current;//To support computers with higher screen density (such as mac with retina) we'll double the pixel density::\ncanvas.width=window.innerWidth*2;canvas.height=window.innerHeight*2;canvas.style.width=\"\".concat(window.innerWidth,\"px\");canvas.style.height=\"\".concat(window.innerHeight,\"px\");//Define 2d context\nvar context=canvas.getContext('2d');context.scale(2,2);context.lineCap='round';context.strokeStyle='black';context.lineWidth=5;contextRef.current=context;},[]);//HANDLERS:\nvar startDrawing=function startDrawing(_ref){var nativeEvent=_ref.nativeEvent;var offsetX=nativeEvent.offsetX,offsetY=nativeEvent.offsetY;contextRef.current.beginPath();contextRef.current.moveTo(offsetX,offsetY);setIsDrawing(true);};var finishDrawing=function finishDrawing(){//asign in to mouseUp\ncontextRef.current.closePath();setIsDrawing(false);};var draw=function draw(_ref2){var nativeEvent=_ref2.nativeEvent;//if we're no drawing - don't draw the line\nif(!isDrawing){return;}var offsetX=nativeEvent.offsetX,offsetY=nativeEvent.offsetY;contextRef.current.lineTo(offsetX,offsetY);contextRef.current.stroke();};return/*#__PURE__*/_jsx(\"canvas\",{onMouseDown:startDrawing,onMouseUp:finishDrawing,onMouseMove:draw,ref:canvasRef});}export default App;","map":{"version":3,"sources":["/Users/macbook/work3/Frontend-webapp/drawing-react-canvas/src/App.js"],"names":["React","useRef","useEffect","useState","App","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","lineTo","stroke"],"mappings":"gLAAA,MAAOA,CAAAA,KAAP,EAAeC,MAAf,CAAuBC,SAAvB,CAAkCC,QAAlC,KAAiD,OAAjD,CACA;2CAEA,QAASC,CAAAA,GAAT,EAAe,CAEb,GAAMC,CAAAA,SAAS,CAAGJ,MAAM,CAAC,IAAD,CAAxB,CACA,GAAMK,CAAAA,UAAU,CAAGL,MAAM,CAAC,IAAD,CAAzB,CACA,cAAkCE,QAAQ,CAAC,KAAD,CAA1C,wCAAOI,SAAP,eAAkBC,YAAlB,eAEAN,SAAS,CAAE,UAAM,CAEf,GAAMO,CAAAA,MAAM,CAAGJ,SAAS,CAACK,OAAzB,CAEA;AACAD,MAAM,CAACE,KAAP,CAAeC,MAAM,CAACC,UAAP,CAAoB,CAAnC,CACAJ,MAAM,CAACK,MAAP,CAAgBF,MAAM,CAACG,WAAP,CAAqB,CAArC,CACAN,MAAM,CAACO,KAAP,CAAaL,KAAb,WAAwBC,MAAM,CAACC,UAA/B,OACAJ,MAAM,CAACO,KAAP,CAAaF,MAAb,WAAyBF,MAAM,CAACG,WAAhC,OAEA;AACA,GAAME,CAAAA,OAAO,CAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB,CACAD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAgB,CAAhB,EACAF,OAAO,CAACG,OAAR,CAAkB,OAAlB,CACAH,OAAO,CAACI,WAAR,CAAsB,OAAtB,CACAJ,OAAO,CAACK,SAAR,CAAoB,CAApB,CACAhB,UAAU,CAACI,OAAX,CAAqBO,OAArB,CACD,CAjBQ,CAiBN,EAjBM,CAAT,CAmBA;AACA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAoB,IAAlBC,CAAAA,WAAkB,MAAlBA,WAAkB,CACvC,GAAOC,CAAAA,OAAP,CAA2BD,WAA3B,CAAOC,OAAP,CAAgBC,OAAhB,CAA2BF,WAA3B,CAAgBE,OAAhB,CACApB,UAAU,CAACI,OAAX,CAAmBiB,SAAnB,GACArB,UAAU,CAACI,OAAX,CAAmBkB,MAAnB,CAA0BH,OAA1B,CAAmCC,OAAnC,EACAlB,YAAY,CAAC,IAAD,CAAZ,CACD,CALD,CAOA,GAAMqB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B;AAEAvB,UAAU,CAACI,OAAX,CAAmBoB,SAAnB,GACAtB,YAAY,CAAC,KAAD,CAAZ,CACD,CALD,CAOA,GAAMuB,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,OAAmB,IAAjBP,CAAAA,WAAiB,OAAjBA,WAAiB,CAC9B;AACA,GAAG,CAACjB,SAAJ,CAAc,CACZ,OACD,CACD,GAAOkB,CAAAA,OAAP,CAA2BD,WAA3B,CAAOC,OAAP,CAAgBC,OAAhB,CAA2BF,WAA3B,CAAgBE,OAAhB,CACApB,UAAU,CAACI,OAAX,CAAmBsB,MAAnB,CAA0BP,OAA1B,CAAmCC,OAAnC,EACApB,UAAU,CAACI,OAAX,CAAmBuB,MAAnB,GACD,CARD,CAUA,mBACE,eACE,WAAW,CAAIV,YADjB,CAEE,SAAS,CAAIM,aAFf,CAGE,WAAW,CAAIE,IAHjB,CAIE,GAAG,CAAI1B,SAJT,EADF,CAQD,CAED,cAAeD,CAAAA,GAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\n//import './App.css';\n\nfunction App() {\n\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const [isDrawing, setIsDrawing] = useState(false)\n\n  useEffect( () => {\n\n    const canvas = canvasRef.current\n\n    //To support computers with higher screen density (such as mac with retina) we'll double the pixel density::\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n\n    //Define 2d context\n    const context = canvas.getContext('2d')\n    context.scale(2,2)\n    context.lineCap = 'round'\n    context.strokeStyle = 'black'\n    context.lineWidth = 5\n    contextRef.current = context;\n  }, []  )\n\n  //HANDLERS:\n  const startDrawing = ({nativeEvent}) =>  {\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n\n  const finishDrawing = () => {\n    //asign in to mouseUp\n\n    contextRef.current.closePath()\n    setIsDrawing(false)\n  }\n\n  const draw = ({nativeEvent}) => {\n    //if we're no drawing - don't draw the line\n    if(!isDrawing){\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n\n  return (\n    <canvas\n      onMouseDown = {startDrawing}\n      onMouseUp = {finishDrawing}\n      onMouseMove = {draw}\n      ref = {canvasRef}\n    />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}